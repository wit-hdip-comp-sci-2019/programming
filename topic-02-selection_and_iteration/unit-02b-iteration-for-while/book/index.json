{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-02b","contentMd":"#Objectives\n\nvariable scope · iteration · for loops · while loops · print · println\n\n"},{"title":"#Variable scope (local and global)","shortTitle":"01","contentMd":"#Variable scope (local and global)\n\nIn this step, we will implement the code examples 2.9 - 2.12 from your lectures.\n\n\n##Understanding variable scope\n\nCreate a new Processing sketch and call it **Example_2_12**.  Note that we will be working through fixing the bugs we discussed in lectures and finish by saving just the completed, bug free version (i.e. 2.12).\n\nEnter the following code into your sketch (one again, try avoid the temptation to cut and paste the code...the more mistakes you make when writing out code, the more you learn!):\n\n~~~java\nvoid setup() \n{\n  size(500,400);\n  background(0);\n  stroke(255);\n  fill(45,45,45);\n}\n\nvoid draw() {\n  int diameter = 100;\n  if (mousePressed) \n  {\n    diameter = diameter – 10;\n    background(0);\n  }\n  ellipse(mouseX, mouseY, diameter, diameter);\n}\n\n~~~\n\nRun your code.  Is your circle reducing in size?  Repeatedly press the mouse button...do you see a bug?  \n\n- The diameter variable is declared in the draw() function i.e. it is a local variable.\n\n- It is only “alive” while the draw() function is running. \n\n- Each time the draw() function:\n    - finishes running, the diameter variable is destroyed.\n    - is called, the diameter variable is re-created. \n\nTo fix this, change your code so that the diameter variable is now global scope: \n\n~~~java\n//The diameter variable is now global scope\nint diameter = 100;\n\nvoid setup() \n{\n  size(500,400);\n  background(0);\n  stroke(255);\n  fill(45,45,45); \n}\n\nvoid draw() \n{\n  if (mousePressed) \n  {\n    diameter = diameter - 10;\n    background(0);\n  }\n  ellipse(mouseX, mouseY, diameter, diameter);\n}\n~~~\n\nRun your code.  Does it work as you would expect now?\n\nThere is a problem with the code.  In the ellipse method, the width and height are absolute values (the negative sign is dropped...processing only cares about the magnitude).\n\nTo handle this logic bug, we need to stop reducing the diameter by 10 when we reach a certain value, say 20.\n\nImplement this code boolean condition in your code and test it again:\n\n~~~java\nint diameter = 100;\n\nvoid setup() \n{\n  size(500,400);\n  background(0);\n  stroke(255);\n  fill(45,45,45); \n}\n\nvoid draw() \n{\n  //boolean condition added to stop reducing the diameter when it reaches 20.\n  if ((mousePressed) && (diameter > 20))\n  {\n    diameter = diameter - 10;\n    background(0);\n  }\n  ellipse(mouseX, mouseY, diameter, diameter);\n}\n~~~\n\nDid you notice that it seems the reduction **appears** larger than 10 when we press the mouse?\n\nWhy?  The default frame rate is 60 refreshes of the screen per second i.e. draw() is called 60 times per second. \n\nYou can change the frame rate by calling the frameRate() function and passing a parameter of, say, 20.  This will mean draw() will only be called 20 times in a second.  \n\nMake the change to the framerate:\n\n~~~java\nint diameter = 100;\n\nvoid setup() {\n  size(500,400);\n  background(0);\n  stroke(255);\n  fill(45,45,45); \n  frameRate(20);   //slowed down to 20 refreshes per second.\n}\n\nvoid draw() {\n  if ((mousePressed) && (diameter > 20)){\n    diameter = diameter - 10;\n    background(0);\n  }\n  ellipse(mouseX, mouseY, diameter, diameter);\n}\n~~~\n\nNow your code should run as expected.  \n\nSave and close your sketch.  \n\n"},{"title":"#While Loops","shortTitle":"02","contentMd":"#While Loops\n\nIn this step, we will implement the code examples 2.13 and 2.14 from your lectures.  We will also do an exercise with a nested while loop.\n\n\n##while Loop\n\nCreate a new Processing sketch and call it **Example_2_13**. \n\nEnter the following code into your sketch:\n\n~~~java\nint yCoordinate = 60;\n\nsize(600, 300);\nbackground(102);\nfill(255);\nnoStroke();\nint i = 0;\n\nwhile (i < 4) \n{\n    rect(50, yCoordinate, 500, 10);\n    yCoordinate = yCoordinate + 20;\n    i++;\n}\n~~~\n\nRun your code.  This code should draw four white horizontal blocks as shown below:\n\n![Expected output](./img/04.png)\n\nSave your sketch.\n\n\n##Same loop, but without the yCoordinate variable\n\nIn the above sketch, do a **Save as...** and give it the name **Example_2_14**. \n\nMake the necessary changes to remove the yCoordinate variable and update the while loop accordingly:\n\n~~~java\nsize(600, 300);\nbackground(102);\nfill(255);\nnoStroke();\n\nint i = 60; \nwhile(i  <= 120)\n{\n    rect(50, i, 500, 10);\n    i += 20;\n}\n~~~\n\nRun it and check that the same output as above is produced.\n\nSave your sketch.\n\n\n##Nested While Loops\n\nCreate a new Processing sketch in your workspace and call it **lab02b_step02**.\n\nEnter the following code into your sketchbook:\n\n~~~java\nint i = 0;   \nwhile ( i < 4 ) {\n   int j = 0;\n   while (j < 4 ) {\n      println(\"The value of i is: \" + i + \" and j is: \" + j);\n      j++;\n   } \n   i++;\n}\n~~~\n\nRun your code.  This code should print out this series of lines to your console:\n\n![Expected output](./img/05.png)\n\nLook at these lines, in particular, look at the values printed for i and for j.  Do you understand the mechanics of how the nested while loop works?  \n\nSave your sketch.\n\n"},{"title":"#For loops","shortTitle":"03","contentMd":"#For loops\n\nIn this step, we will implement the for loop examples 2.15 & 2.16 from your lectures.\n\n\n##Convert a while loop to a for loop\n\nCreate a new Processing sketch in your workspace and call it **Example_2_15**.\n\nThe following code uses a while loop to draw four rectangles.  Rewrite it so that it uses a for loop instead:\n\n~~~\nint yCoordinate = 60;\n\nsize(600, 300);\nbackground(102);\nfill(255);\nnoStroke();\n\nint i = 0;\nwhile (i < 4 ) \n{\n    rect(50, yCoordinate, 500, 10);\n    yCoordinate += 20;\n    i++;\n}\n~~~\n\nRun your code.  Does it work as you would expect?\n\n![Expected output](./img/04.png)\n\nSave your work. \n\n\n##Remove the yCoordinate variable.\n\nIn the above sketch, do a **Save as...** and give it the name **Example_2_16**. \n\nNow that you have the for loop working correctly, change (called refactoring in programming) the code so that it no longer has the variable **yCoordinate**.  Update the  loop to ensure that the **yCoordinate** functionality is not lost. \n\nSave your work.\n\n\n##Rewriting the while nested loop\n\nCreate a new Processing sketch in your workspace and call it **lab02b_step03**.\n\nRefactor the code below (a nested loop using *while*) to be a nested loop using the *for* loop.\n\n~~~java\nint i = 0;\nwhile ( i < 4 ) {\n\t int j = 0;\n     while (j < 4 ) {\n        println(\"The value of i is: \" + i + \" and j is: \" + j);\n        j++;\n        }\n     i++;\n     }\n~~~\n\nRun your code.  Does it work as you would expect?\n\n![Expected output](./img/05.png)"},{"title":"#Exercises","shortTitle":"Exercises","contentMd":"#Exercises\n\n- For each exercise listed below, create a new sketch.\n\n- You may need to visit the [Processing website](https://processing.org/reference/) for additional information.\n\n\n##Exercise 1 (static drawing)\n\nCreate a display window of 400x400 with a grey background.\n\nIn the setup() method, use a **for** loop to draw a chessboard (for this exercise, use the line() method).\n\nA chess board is an 8x8 grid and should look like the screen shot below:\n\n![Chess Board using line method](./img/00.png)\n\n\n##Exercise 2 (static drawing)\n\nCreate a new sketch and re-write the Exercise 1 code to use **while** loops instead of for loops.\n\n\n##Exercise 3 (static drawing)\n\nCreate a new sketch and re-write the **Exercise 1** code so that the chess board is drawn correctly regardless of the width and height of the display window.\n\n![Chess Board on a non-square display window](./img/01.png)\n\n\n##Console Exercise 1\n\nCreate a new sketch and use a **while** loop and the println method to print hello 5 times to the console.  \n\nWhen you have it working using the while loop, refactor your code to use a **for** loop.\n\n\n##Console Exercise 2\n\nCreate a new sketch and use a **for** loop and the println method to print the numbers 1 to 10 to the console.  \n\nWhen you have it working using the for loop, refactor your code to use a **while** loop.\n\n\n##Console Exercise 3\n\nCreate a new sketch and use a **while** loop and the println method to print **10, 9, 8, 7, 6, 5, 4, 3, 2, 1, blast off** to the console.  \n\nWhen you have it working using the while loop, refactor your code to use a **for** loop.\n\n\n##Console Exercise 4\n\nCreate a new sketch and use a **for** loop and the println method to print all the even numbers between 2 and 10 to the console.  \n\nWhen you have it working using the for loop, refactor your code to use a **while** loop.\n\n"},{"title":"#Challenges","shortTitle":"Challenges","contentMd":"#Challenges\n\n- For each exercise listed below, create a new sketch.\n\n- You may need to visit the [Processing website](https://processing.org/reference/) for additional information.\n\n\n##Challenge  1 (static drawing)\n\nCreate a new sketch and, using two **while** loops, draw this image:\n\n![Image generated using for loops](./img/02.png)\n\nWhen you have it working using while loops, convert the code to use **for** loops.\n\n\n##Challenge 2 (static drawing)\n\nCreate a new sketch and draw your chessboard on a 400x400 window using the rect() method instead of the line() method.  You will need a nested **for** loop to do this.\n\n![Chess Board with checkered pattern](./img/00.png)\n\n##Challenge 3 (static drawing)\n\nCreate a new sketch and using the code from Challenge Exercise 2, try to colour every subsequent square in a darker colour of gray, as shown in the image below:\n\n![Chess Board with checkered pattern](./img/03.png)\n\nNote:  You will need to read up on the modulo (%) operator in order to do this exercise.  This is quite a difficult exercise, so don't worry if you can't get it working.\n\n##Challenge 4 (static drawing)\n\nCreate a new sketch and using the code from Challenge Exercise 3, try to colour every subsequent white square in a darker colour of gray, as shown in the image below to give the illusion of lighting:\n\n![Chess Board with checkered pattern](./img/gradient.png)\n\n"},{"title":"#Solutions","shortTitle":"Solutions","contentMd":"#Solutions\n\nThe solutions for this lab can be found [here](archives/lab02b_solutions.zip). \n\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\n\nAfter unzipping the solutions, it might be a good idea to copy the folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\n"}]}