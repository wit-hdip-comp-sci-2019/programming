


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-06a",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Game of Pong Architecture · Solutions for all versions · PongGame V1.0 - V5.0</p>",
  "folder" : "book-v1-v5",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-06a",
    "contentMd" : "#Objectives\n\nGame of Pong Architecture · Solutions for all versions · PongGame V1.0 - V5.0\n"
    },
  
    {
    "title": "#The Game of Pong",
    "shortTitle": "Pong",
    "contentMd" : "#The Game of Pong\n\nIn this section, we wil introduce the Game of Pong that we will build over the next few labs.\n    \n\n##Tournament\n\nIn our version of Pong, the player enters into a tournament of games. \n\nThe player decides how many games of Pong they would like to play in their tournament:\n\n![Number of Games in Tournament](./img/01.png)\n\n\n##Player name\n\nThe player enters their name (if more than 6 characters are entered, Pong will truncate the String):\n\n![Name of Player](./img/02.png)\n\n\n##Playing the Game\n\nWhen the ball is hit by the paddle, the score is increased by 1.\n\nWhen the paddle misses the ball, a life is lost.\n\nThere are three lives in a game.\n\n![Playing Pong](./img/03.png)\n\nWhen a game ends and there are more games left to play in the tournament:\n\n- The score is displayed.\n\n- The player is asked if they want to continue with the tournament.\n\n![Continue with Tournament?](./img/04.png)\n\nIf the player wishes to continue:\n\n- Their game score is stored in an array. \n\n- A new game is started (the variables storing the number of lives and score is reset to zero).\n\n![Playing Pong](./img/03.png)\n\nPlayer is shown their score and asked again if they wish to continue.\n\n![Continue with Tournament?](./img/05.png)\n\nIf they choose yes:\n\n- Their score is stored in an array. \n\n- A new game is started.\n\n\n##Ending the Game\n\nWhen a game ends and there are NO more games left to play in the tournament:\n\n- The player name and score is displayed for each game in the tournament.\n\n- The tournament statistics are also displayed (highest score, lowest score and average score).\n\n![Tournament Over](./img/06.png)\n\n"
    },
  
    {
    "title": "#Architecture of Pong",
    "shortTitle": "Architecture",
    "contentMd" : "#Architecture of Pong\n\nIn the final version (V8.0) of Pong, there are four classes:\n\n- **PongGame** - has the setup() and draw() methods.  It starts the game, handles player input, manages collision detection between the Ball and the Paddle, ends the game and outputs the player statistics.\n    \n- **Ball** - controls the location, size and speed of the ball.  This class updates the ball and displays it at the updated location.\n\n- **Paddle** - controls the location and size of the paddle.  This class updates the paddle location and displays it at the updated location. \n    \n- **Player** - stores the player name and the score for each game in the tournament (in an array).  It calculates the statistics for the games in the tournament. \n\n![PongGame V8.0](./img/07.png)\n\n\n##Versions of Pong\n\nWe will incrementally build versions of the game and finish with Game of Pong V8.0.  \n\nThe 8 versions are:\n\n- Game of Pong V1.0 (Ball class)\n\n- Game of Pong V2.0 (Paddle class)\n\n- Game of Pong V3.0 (Simple collision detection)\n\n- Game of Pong V4.0 (Lives lost, lives per game, score)\n\n- Game of Pong V5.0 (Tournament functionality)\n\n- Game of Pong V6.0 (Player class – array, no statistics)\n\n- Game of Pong V7.0 (Player class – array, with statistics)\n\n- Game of Pong V8.0 (JOptionPane for I/O)\n\nThere is an additional version that covers more advance collision using pythagorus theorem:\n\n- Game of Pong V9.0 (Advanced collision detection)\n\nThe solutions for each of these versions can be downloaded from [here](archives/game-of-pong-v1-to-v9.zip). \n\n\n"
    },
  
    {
    "title": "#PongGameV1.0",
    "shortTitle": "V1",
    "contentMd" : "#PongGameV1.0\n\nHaving read the lecture on PongGameV1.0 we will now develop it. \n\nMake sure that you read and understand the code below, while typing it into the Ball class.  If you have any questions on any part of the code, make sure to ask your lecturer.\n\n![PongGame V1.0](./img/08.png)\n\n\n##Ball class\n\nCreate a new Processing sketch called ''PongGameV1_0''.\n\nCreate a new tab and call it ''Ball''.\n\nIn the Ball class, add the instance fields:\n\n~~~java\npublic class Ball \n{\n  private float xCoord;      //x coordinate of the ball\n  private float yCoord;      //y coordinate of the ball\n  private float diameter;    //diameter of the ball\n  private float speedX;      //speed along the x-axis\n  private float speedY;      //speed along the y-axis\n}\n~~~\n\nThen add these getter methods:\n\n~~~java\n   public float getXCoord(){  \n      return xCoord;\n   }  \n\n   public float getYCoord(){\n      return yCoord;\n   }  \n\n   public float getDiameter(){\n      return diameter;\n   }  \n~~~\n\nFollowed by the setDiameter setter:\n\n~~~java\n  public void setDiameter(float diameter){\n     //The ball diameter must be between 20 and height/6 (inclusive)\n     if ((diameter >= 20) && (diameter <= height/6)){\n        this.diameter = diameter;\n     }\n     else {\n        // If an invalid diameter is passed as a parameter, a default of 20 is imposed.\n        // With this animation, if we do not supply a default value for the diameter, \n        // a ball may not be drawn on the display window.  Important note: it is not       \n        // always appropriate to provide a default value at sette) level; this will \n        //depend on your design.\n        this.diameter = 20;\n     }\n  }\n~~~\n\nNow add this method that will display a white ball with no outline on the display window:\n\n~~~java\n  public void display(){\n     fill(255);\n     noStroke();\n     ellipse(xCoord, yCoord, diameter, diameter);\n  }  \n~~~\n\nNow add the resetBall private helper method:\n\n~~~java\n  private void resetBall(){\n     xCoord = 0;\n     yCoord = random(height);\n     speedX = random(3, 5);   \n     speedY = random(-2, 2);\n  }\n~~~\n\nNOTE:  A private helper method is a method that is private to the class you are in i.e. you are not allowed to use it outside of the current class.  The resetBall method is used by the Ball constructor and the update method.\n\nStill in the ball class, add this constructor:\n\n~~~java\n  public Ball(float diameter){\n      setDiameter(diameter);\n      resetBall();\n  }\n~~~\n\nAdd a hit method that will change the ball direction when it hits the paddle and bump it back to the edge of the paddle.\n\n~~~java\n  public void hit(){\n      speedX = speedX * -1;\n      xCoord = xCoord + speedX;\n  }\n~~~\n\nFinally add the following update method:\n\n~~~java\n  public boolean update(){\n    boolean lifeLost = false;\n\n    //update ball coordinates\n    xCoord = xCoord + speedX;\n    yCoord = yCoord + speedY;\n       \n    //reset position if ball leaves the screen\n    if (xCoord > width + diameter/2){\n       resetBall();\n       lifeLost = true;\n    }\n\n    // If ball hits the left edge of the display \n    // window, change direction of xCoord\n    if (xCoord < diameter/2){\n       xCoord = diameter/2;\n       speedX = speedX * -1;\n    }\n       \n    // If ball hits top or bottom of the display\n    //  window, change direction of yCoord\n    if (yCoord > height - diameter/2){\n       yCoord = height - diameter/2;\n       speedY = speedY * -1;\n    } \n    else if (yCoord < diameter/2){\n       yCoord = diameter/2;\n       speedY = speedY * -1;\n    }\n    return lifeLost;\n } \n~~~\n\nYour ball class is complete.  Save this code.\n\n\n##PongGameV1_0 class\n\nNow that the Ball class is written, we will start to use it in the **PongGameV1_0** main tab.\n\nReturn to the main tab and enter the following code:\n\n~~~java\nBall ball;\n\nvoid setup(){\n   size(600,600);\n   noCursor();\n\n   //setting up the ball with hard-coded sizes.\n   ball = new Ball(20.0);\n}\n\nvoid draw(){\n   background(0);    \n   \n   //Update the ball position and display it.\n   ball.update();\n   ball.display();       \n}\n~~~\n\n\n##Test your code\n\nRun your code.  \n\nYou should now have a ball that traverses the screen left to right.\n\nWhen the ball reaches the right hand side, it should disappear off screen and a new ball should appear in a random lcoation on the left hand side.  \n\nWhen a new ball appears, it should traverse the screen in a random trajectory at a random speed.\n\nMake sure you understand the code before moving onto PongGameV2_0.\n\n\n##Solution\n\nIf your code is not working, the solution can be found [here](archives/PongGameV1_0.zip).\n\n"
    },
  
    {
    "title": "#PongGameV2.0",
    "shortTitle": "V2",
    "contentMd" : "#PongGameV2.0\n\nHaving read the lecture on PongGameV2.0 we will now develop it. \n\nMake sure that you read and understand the code below, while typing it into the Paddle class.  If you have any questions on any part of the code, make sure to ask your lecturer.\n\n![PongGame V2.0](./img/09.png)\n\n\n##Paddle class\n\nOpen your solution to ''PongGameV1_0''.\n\nSave it as ''PongGameV2_0''\n\nCreate a new tab and call it ''Paddle''.\n\nIn the Paddle class, add the instance fields:\n\n~~~java\npublic class Paddle \n{\n   private int xCoord;        // X coordinate of the paddle\n   private int yCoord;        // Y coordinate of the paddle\n   private int paddleWidth;   // width of the paddle \n   private int paddleHeight;  // height of the paddle\n}\n~~~\n\nThen add these getter methods:\n\n~~~java\n   public int getXCoord(){\n      return xCoord;\n   }\n\n   public int getYCoord(){\n      return yCoord;\n   }\n\n   public int getPaddleWidth(){\n      return paddleWidth;\n   }\n\n   public int getPaddleHeight(){\n      return paddleHeight;\n   }\n~~~\n\nFollowed by the setPaddleWidth setter:\n\n~~~java\n  public void setPaddleWidth(int paddleWidth){\n     //The paddle width must be between 10 and \n     //width/2 (inclusive)\n     if ((paddleWidth >= 20) && (paddleWidth <= width/2)){\n         this.paddleWidth = paddleWidth;\n     }\n     else{\n     // If an invalid width is passed as a parameter, a default\n     // width of 20 is imposed.  With this animation, if we do \n     // not supply a default value for the width, a paddle \n     //may not be drawn on the display window.  Important \n     // note: it is not always appropriate to provide a default \n     // value at setter level; this will depend on your \n     //design.\n         this.paddleWidth = 20;\n     }\n  } \n~~~\n\nFollowed by the setPaddleHeight setter:\n\n~~~java\n  public void setPaddleHeight(int paddleHeight){\n     //The paddle height must be between 50 \n     //and height/2 (inclusive)\n     if ((paddleHeight >= 50) && (paddleHeight <= height/2)){\n         this.paddleHeight = paddleHeight;\n     }\n     else{\n     // If an invalid height is passed as a parameter, a default \n     // height of 50 is imposed.  With this animation, if we do \n     // not supply a default value for the height, a paddle \n     // may not be drawn on the display window.  Important \n     // note: it is not always appropriate to provide a default \n     // value at setter level; this will depend on your design.\n         this.paddleHeight = 50;\n     }\n  }\n~~~\n\nNow add this constructor:\n\n~~~java\n  public Paddle(int paddleWidth, int paddleHeight)\n  {\n     setPaddleWidth(paddleWidth);\n     setPaddleHeight(paddleHeight);\n     \n     // the xCoordinate variable is set here and it stays \n     // this value for duration of the program.\n     xCoord = width - this.paddleWidth;\n     \n     // the yCoordinate variable is set here and changes \n     // later in the program as the mouse moves on the \n     // vertical plane.\n     yCoord = height/2;\n  }\n~~~\n\nAdd this method that will display a gray paddle with no outline on the display window:\n\n~~~java\n  public void display(){\n     fill(102);\n     noStroke();\n     rect(xCoord, yCoord, paddleWidth, paddleHeight);\n  }    \n~~~\n\nFinally add the following update method:\n\n~~~java\n  public void update()\n  {\n     yCoord = mouseY - paddleHeight/2;\n    \n     //Reset yCoord if it’s outside the window coordinates. \n     if (yCoord < 0){\n         yCoord = 0; \n     }\n     if (yCoord > (height - paddleHeight)){\n         yCoord = height - paddleHeight;\n     }\n  } \n~~~\n\nYour Paddle class is complete.  Save this code.\n\n\n##PongGameV2_0 class\n\nThe code from your PongGameV1_0 class should be in your PongGameV2_0 class/main tab.\n\nThe following methods currently perform this processing:\n\n- setup() sets up the size of the window, switches off the cursor and creates a new Ball object\n\n- draw() repeatedly updates the ball location on the screen (based on speedX and speedY) and redisplays it.\n\nUpdate this code so that a Paddle object is created in the setup() method.  To the Paddle constructor, pass in 20 as the width and 100 as the height.  Also update the draw() method to include this code:\n\n~~~java\n   paddle.update();     //Update the paddle location in line with the cursor\n   paddle.display();    //Draw the paddle in this new location \n~~~\n\n\n##Test your code\n\nRun your code.  \n\nThe ball functionality should not have been affected.  It still should:\n\n- traverse the screen left to right.\n\n- when it reaches the right hand side, disappear off screen and a new ball should appear in a random lcoation on the left hand side.  \n\n- when re-appearing, traverse the screen in a random trajectory at a random speed.\n\n\nA paddle should also now appear.  It should be pinned to the right hand side of the window and should move on it's vertical plane in accordance with the movement of the mouse pointer.\n\nAs there is no collision detection built into the code, the paddle and ball ignore each other.\n\nMake sure you understand the code before moving onto PongGameV3_0.\n\n\n##Solution\n\nIf your code is not working, the solution can be found [here](archives/PongGameV2_0.zip). \n\n"
    },
  
    {
    "title": "#PongGameV3.0",
    "shortTitle": "V3",
    "contentMd" : "#PongGameV3.0\n\nOn completion of this lab you should be very familiar with the game of pong and have included collision detection code for the Ball and Paddle class.  You should see the game evolve through maintaining tournaments, lives lost and scores for the game.  In this lab, you will work on PongGameV3.0, PongGameV4.0 and PongGameV5.0.\n\nHaving read the lecture on PongGameV3.0 we will now develop it. \n\nThis version of the game adds collision detection between the Ball and the Paddle.\n\n![PongGame V3.0](./img/01.png)\n\n\n##Adding hitPaddle method\n\nOpen your solution to ''PongGameV2_0''.  A copy of the V2 solution is [here](archives/PongGameV2_0.zip), if you need it.\n\nSave it as ''PongGameV3_0''\n\nIn the PongGameV3_0 class/main tab, add the following hitPaddle method:\n\n~~~java\n//method returns true if the ball and paddle overlap (i.e. ball is hit), false otherwise.\nboolean hitPaddle(Paddle paddle, Ball ball)\n{\n   //These variables measure the magnitude of the gap between the paddle and the ball.  \n   float circleDistanceX = abs(ball.getXCoord() - paddle.getXCoord());\n   float circleDistanceY = abs(ball.getYCoord() - paddle.getYCoord() - paddle.getPaddleHeight()/2);\n   \n   //The Ball is too far away from the Paddle on the X axis to have a collision, so abandon collision detection\n   if (circleDistanceX > (ball.getDiameter()/2)) {\n      return false;\n   }\n   \n   //The Ball is too far away from the Paddle on the Y axis to have a collision, so abandon collision detection\n   if (circleDistanceY > (paddle.getPaddleHeight()/2 + ball.getDiameter()/2)) {\n       return false; \n   }\n   \n   //We have a collision!\n   return true;\n   \n}\n~~~\n\n\n##Using the hitPadde method\n\nIn the draw method, after the ball.display() method call, insert the following code:\n\n~~~java\n   //Set variable to true if ball and paddle are overlapping, false if not \n   \n   boolean collision = hitPaddle(paddle, ball);\n   if (collision == true){\n      ball.hit();        //the ball is hit i.e. reverses direction.\n   }     \n~~~\n\n\n##Test your code\n\nRun your code.  \n\nThe ball functionality should not have been affected.  It still should:\n\n- traverse the screen left to right.\n\n- when it reaches the right hand side, disappear off screen and a new ball should appear in a random lcoation on the left hand side.  \n\n- when re-appearing, traverse the screen in a random trajectory at a random speed.\n\n\nThe paddle functionality should not have been affected.  It should still:\n\n- be pinned to the right hand side of the window \n\n- move on it's vertical plane in accordance with the movement of the mouse pointer.\n\n\nYou should now have collision detection built into the code.  Test that the paddle now hits the ball when they touch.\n\n\n##Solution\n\nIf your code is not working, the solution can be found [here](archives/PongGameV3_0.zip). \n\n"
    },
  
    {
    "title": "#PongGameV4.0",
    "shortTitle": "V4",
    "contentMd" : "#PongGameV4.0\n\nHaving read the lecture on PongGameV4.0 we will now develop it. \n\nMake sure that you read and understand the code below, while typing it into the relevant class.  If you have any questions on any part of the code, make sure to ask your lecturer.\n\n![PongGame V4.0](./img/02.png)\n\n\n##Adding game information\n\nIn this version, we want to store the game information such as the number of lives lost, the maximum lives allowed per game and the score of the game.  The game will end when the user loses the number of lives allowed per game.\n\nOpen your solution to ''PongGameV3_0''.\n\nSave it as ''PongGameV4_0''\n\nIn the PongGameV4_0 class, add the following global variables to store the game information:\n\n~~~java\n  //Current game data\n  int livesLost = 0;         //keeps track of number of lives lost in current game\n  int score = 0;             //high score of the current game\n  int maxLivesPerGame = 3;   //maximum number of lives that can be lost \n                             //before the game ends\n~~~\n\nIn the draw() method, change the call to the ball.update() method to be:\n\n~~~java\n  // Update the ball position.  If true is returned, the ball has left the display   \n  // window i.e. a life is lost\n  if (ball.update() == true){\n      livesLost++;\n      println(\"Lives lost:  \"  + livesLost);\n  }\n~~~\n\nIn the draw() method, replace this version 3.0 code:\n\n~~~java\n   //VERSION 3.0 code.\n   //Draw the ball at its new location and check for a collision with the paddle\n   ball.display();    \n   //Set variable to true if ball and paddle are overlapping, false if not \n   boolean collision = hitPaddle(paddle, ball);\n   if (collision == true){\n      ball.hit();        //the ball is hit i.e. reverses direction.\n   }\n~~~\n\nwith the version 4.0 code:\n\n~~~java\n  //If the player still has a life left in the current game, \n  //draw the ball at its new location and check for a collision with the paddle\n  if (livesLost < maxLivesPerGame){ \n     ball.display();       \n     //Set variable to true if ball and paddle are overlapping, false if not \n     boolean collision = hitPaddle(paddle, ball);\n     if (collision == true){\n        ball.hit();     //the ball is hit i.e. reverses direction.\n        score++;      //increase score in the current game by 1, if the player hit the ball.\n        println(\"Score:  \"  + score);\n     }\n  }\n  //The player has no lives left so the game ends\n  else{\n     println(\"Game Over!\");\n     println(\"You have lost all of your lives:  \"  + livesLost);\n     println(\"Your final score is:  \"  + score); \n     exit();     \n  }\n~~~\n\n\n##Test your code\n\nRun your code.  \n\nYour output should be similar to this:\n\n![PongGame V4.0 output](./img/03.png)\n\nMake sure you understand the code before moving onto PongGameV5_0.\n\n\n##Solution\n\nIf your code is not working, the solution can be found [here](archives/PongGameV4_0.zip). \n\n"
    },
  
    {
    "title": "#PongGameV5.0",
    "shortTitle": "V5",
    "contentMd" : "#PongGameV5.0\n\nHaving read the lecture on PongGameV5.0 we will now develop it. \n\nMake sure that you read and understand the code below, while typing it into the relevant class.  If you have any questions on any part of the code, make sure to ask your lecturer.\n\n![PongGame V5.0](./img/10V5.png)\n\n\n##Adding tournament information\n\nIn this version, we want to store the tournament information such as the number of games in a tournament and the number of games played so far in the tournament.\n\nOpen your solution to ''PongGameV4_0''.\n\nSave it as ''PongGameV5_0''\n\nIn the PongGameV5_0 class, add the following global variables to store the tournament information:\n\n~~~java\n  //Tournament data\n  int maxNumberOfGames = 5;     //maximum number of games in a tournament\n  int numberOfGamesPlayed = 0;  //num of games played, so far, in a tournament\n~~~\n\nIn the draw() method, replace the ''else'' portion relating to this if statement:\n\n~~~java\n  if (livesLost < maxLivesPerGame){ \n~~~\n\nwith this code:\n\n~~~java\n  //The player has no lives left so the game ends\n  else{\n     numberOfGamesPlayed++;        \n     //If the player has more games left in the tournament, \n     //display their score and ask them if they want to continue with tournament.\n     if (numberOfGamesPlayed < maxNumberOfGames){\n        resetGame();\n     }\n     else{\n        //the player has no more games left in the tournament \n        tournamentOver();\n     }\n  }\n~~~\n\n\n##The resetGame() method\n\nIn the PongGameV5_0 class, add this new method:\n\n~~~java\n// This method prepares for the next game by resetting the variables \n// that store the current game information.\nvoid resetGame()\n{\n    println(\"Game Over!\");\n    println(\"Starting a new game...\");\n    livesLost = 0;        //resets the lives lost in the current game to zero\n    score = 0;            //resets the score of the current game to zero   \n}\n~~~\n\n\n##The tournamentOver() method\n\nIn the PongGameV5_0 class, add this new method:\n\n~~~java\n// This method displays the player information, before exiting the program.\nvoid tournamentOver()\n{\n   println(\"Game Over!\");\n   println(\"Tournament Over!\");\n   exit();  \n}\n~~~\n\n\n##Test your code\n\nRun your code.  \n\nYour output should be similar to this:\n\n![PongGame V5.0 output](./img/10V5.png)\n\nMake sure you understand the code before moving onto PongGameV6_0.\n\n\n##Solution\n\nIf your code is not working, the solution can be found [here](archives/PongGameV5_0.zip). \n\n"
    }
  
  ]
  }

