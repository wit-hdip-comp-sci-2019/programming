{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-03a","contentMd":"#Objectives\n\nmethods · mouse event methods · bespoke methods\n"},{"title":"#Understanding mouse event methods","shortTitle":"01","contentMd":"#Understanding mouse event methods\n\nIn this step, you will work on the processing example 3.1 from your lectures.\n\n\n##Coding the setup() method\n\nCreate a new Processing sketch and call it **Example_3_1**.\n\nEnter the following code into your sketchbook (don't cut and paste it):\n\n~~~java\nvoid setup() \n{\n    size(400, 400);\n    background(0);\n    textAlign(CENTER);\n    textSize(24);\n    fill(255);\n    text(\"mouse has done nothing\", width/2, height/2);\n}\n~~~\n\nRun the code. \n\n![Expected output](./img/01.png)\n\nYou have used a few new methods relating to **text**.  Navigate to the references section of the processing website and read about these methods.\n\nIf you are still not fully sure what a particular method is doing, change the actual parameters for it and see the effect on your sketch.  When finished, change the parameter back to the original value. \n\n\n##Coding the draw() method\n\nMouse and keyboard events only work when a program has draw().\n\nWithout draw(), the code is only run once and then stops listening for events.\n\nIn your open sketch, add the draw() method to it.  The body of the method should be empty.\n\n\n##Coding the mouseMoved() method\n\nAdd a mouseMoved method that will change the background to a red colour.\n\nPrint the following text to the display window (not the console):\n\n- \"mouse was moved\"\n\n\nRun your code.  Does it work as you would expect when you move the mouse?\n\n![Expected output](./img/02.png)\n\nNote: the code for this method is here:\n\n~~~java\nvoid mouseMoved() \n{ \n    background(150, 10, 70); \n    text(\"mouse was moved\", width/2, height/2); \n}\n~~~\n\n\n##Coding the mouseDragged() method\n\nAdd a mouseDragged method that will change the background to a blue colour.\n\nPrint the following text to the display window (not the console):\n\n- \"mouse was dragged\"\n\n\nRun your code.  Does it work as you would expect when you drag the mouse?\n\n![Expected output](./img/03.png)\n\nNote: the code for this method is here:\n\n~~~java\nvoid mouseDragged() \n{ \n    background(10, 70, 100); \n    text(\"mouse was dragged\", width/2, height/2); \n}\n~~~\n\n\n##Coding the mouseReleased() method\n\nAdd a mouseReleased method that will change the background to a purple colour.\n\nPrint the following text to the display window (not the console):\n\n- \"mouse was released\"\n\n\nRun your code.  Does it work as you would expect when you release the mouse?\n\n![Expected output](./img/04.png)\n\nNote: the code for this method is here:\n\n~~~java\nvoid mouseReleased() \n{ \n    background(100, 0, 100); \n    text(\"mouse was released\", width/2, height/2); \n}\n~~~\n\n\n##Coding the mousePressed() method\n\nAdd a mousePressed method that will change the background to a green colour.\n\nPrint the following text to the display window (not the console) when the left button was pressed:\n\n- \"mouse was pressed and it was the left button\"\n\n\nPrint the following text to the display window (not the console) when the right button was pressed:\n\n- \"mouse was pressed and it was the right button\"\n\n\nRun your code.  Does it work as you would expect when you press the left and then the right mouse buttons?\n\n![Expected output](./img/05.png)\n\nNote: the code for this method is here:\n\n~~~java\nvoid mousePressed() \n{\n    background(100, 100, 0);\n    text(\"mouse was pressed\", width/2, height/2);\n    if ( mouseButton == LEFT) \n    {\n        text(\"and it was the left button\", width/2, height/2 + 40);\n    }\n    if (mouseButton == RIGHT) \n    {\n        text(\"and it was the right button\", width/2, height/2 + 40);\n    }\n}\n~~~\n\n"},{"title":"#Mouse event methods","shortTitle":"02","contentMd":"#Mouse event methods\n\nIn last week's examples, 2.5 to 2.8 inclusive, we used the mouse system variables e.g. mousePressed. \n\nIn this step, you will re-write that code to use mouse event methods instead e.g. void mousePressed(). \n\nYou will notice, this time, that we haven't given you the reworked code to type in; have a go at making the code changes yourself and if you need some help, you can refer to your lecture notes (or download the solutions).  And don't worry if you have to refer to either the notes or the solutions, you are only three weeks into the course!\n\n\n##Example 2.5\n\nCreate a new Processing sketch in your workspace and call it **Exercise_2_5_v2**.\n\nCut and paste the following code into your sketchbook:\n\n~~~java\nvoid setup() {\n  size(100,100);\n}\n\nvoid draw() {\n   background(0);\n   stroke(255);\n   fill(128);\n   if (mousePressed){\n       rect(45,45,34,34); \n   }\n   else{\n       ellipse(45,45,34,34);     \n   }\n}\n~~~\n\nRun the code so that you understand exactly what it does.\n\nRework the code so that it no longer tests the **mousePressed** variable but uses the **void mousePressed()** method instead.\n\nRun your code.  Does it work as you would expect?\n\n\n##Example 2.6\n\nCreate a new Processing sketch in your workspace and call it **Exercise_2_6_v2**.\n\nCut and paste the following code into your sketchbook:\n\n~~~java\nvoid setup() {\n  size(100,100);\n}\n\nvoid draw() {\n  background(204);\n  if (mousePressed == true)    \n  {\n       fill(255); // white\n   } else {\n       fill(0);     // black\n   }\n   rect(25, 25, 50, 50);\n}\n~~~\n\nRun the code so that you understand exactly what it does.\n\nRework the code so that it no longer tests the **mousePressed** variable but uses the **void mousePressed()** method instead.\n\nRun your code.  Does it work as you would expect?\n\n\n##Example 2.7\n\nCreate a new Processing sketch in your workspace and call it **Exercise_2_7_v2**.\n\nCut and paste the following code into your sketchbook:\n\n~~~java\nvoid setup() {\n  size(100,100);\n}\n\nvoid draw() { \n   if (mousePressed){\n       if (mouseButton == LEFT) \n            fill(0);      // black\n       else if (mouseButton == RIGHT)\n            fill(255);    // white\n   }        \n   else { \n       fill(126);     // gray\n    }\n    rect(25, 25, 50, 50);\n}\n~~~\n\nRun the code so that you understand exactly what it does.\n\nRework the code so that it no longer tests the mouse system variable but uses the mouse event methods instead.\n\nRun your code.  Does it work as you would expect?\n\n\n##Example 2.8\n\nCreate a new Processing sketch in your workspace and call it **Exercise_2_8_v2**.\n\nCut and paste the following code into your sketchbook:\n\n~~~java\nvoid setup() {\n  size(500,400);\n  background(0);\n}\n\nvoid draw() {\n \n  if (mousePressed) {\n    background(0);\n  }\n\n  stroke(255);\n  fill(45,45,45);\n  ellipse(mouseX, mouseY, 100, 100);\n}\n~~~\n\nRun the code so that you understand exactly what it does.\n\nRework the code so that it no longer tests the mouse system variable but uses the mouse event methods instead.\n\nRun your code.  Does it work as you would expect?\n\n"},{"title":"#Writing your own methods","shortTitle":"03","contentMd":"#Writing your own methods\n\nIn this step, you will work on reproducing the code examples 3.2 to 3.5 inclusive from your lectures.\n\n\n##Example 3.2\n\nCreate a new Processing sketch in your workspace and call it **Example_3_2**.\n\nWrite a method called **drawRedSquare** that takes no parameters.  \n\nThe return type for this method is **void**.\n\nThe method body should include the following processing:\n\n- set the fill colour to red.\n- draw a square with a length of 60 pixels at the coordinates (70,70).\n\n\nThe **drawRedSquare** method should be called from the draw() method.\n\nRun your code; a red square should be drawn on the display window.\n\nThe solution code is:\n\n~~~java\nvoid setup()\n{\n  size(200,200);\n  background(20,70,105);\n}\n\nvoid draw()\n{\n   drawRedSquare();\n}\n\nvoid drawRedSquare()\n{\n  fill(255,0,0);\n  rect(70,70,60,60);\n}\n~~~\n\n\n##Example 3.3\n\nCreate a new Processing sketch in your workspace and call it **Example_3_3**.\n\nWrite a method called **drawRedSquare** that takes one parameter of type **int**.  This parameter will be used to set the length of the square.\n\nThe return type for this method is **void**.\n\nThe method body should include the following processing:\n\n- set the fill colour to red.\n- draw a square at the coordinates (70,70) and use the int parameter to determine the length of the square.\n\n\nThe **drawRedSquare** method should be called from the draw() method, passing the value **60** as its argument.\n\nRun your code; a red square should be drawn on the display window.\n\nThe solution code is:\n\n~~~java\nvoid setup()\n{\n  size(200,200);\n  background(20,70,105);\n}\n\nvoid draw()\n{\n   drawRedSquare(60);\n}\n\nvoid drawRedSquare(int length)\n{\n  fill(255,0,0);\n  rect(70,70,length, length);\n}\n~~~\n\n\n##Example 3.4\n\nCreate a new Processing sketch in your workspace and call it **Example_3_4**.\n\nWrite a method called **drawRedSquare** that takes three parameters.  Each of the parameters is of type **int**:\n\n- parameter one represents the length of the square.\n\n- parameter two represents the xCoordinate of the square.\n\n- parameter three represents the yCoordinate of the square.\n\n\nThe return type for this method is **void**.\n\nThe method body should include the following processing:\n\n- set the fill colour to red.\n\n- draw a square where:\n\n    - the length of the square is the value passed as the first parameter into the method.\n \n    - its coordinates are those that were passed as the second and third arguments to the method. \n\n    \nThe **drawRedSquare** method should be called from the draw() method, passing the values **60, 70, 40** as its arguments.\n\nRun your code; a red square should be drawn on the display window.\n\n![Expected output](./img/example03_4.png) \n\nThe solution code is:\n\n~~~java\nvoid setup()\n{\n  size(200,200);\n  background(20,70,105);\n}\n\nvoid draw()\n{\n    drawRedSquare(60, 70, 40);\n}\n\nvoid drawRedSquare(int length, int xCoord, int yCoord)\n{\n    fill(255,0,0);\n    rect(xCoord,yCoord, length, length);\n}\n~~~\n\n\n##Example 3.5\n\nCreate a new Processing sketch in your workspace and call it **Example_3_5**.\n\n![Expected output](./img/example03_5.png)\n\nEnter the following code into the sketch (don't cut and paste, write it out):\n\n~~~java\nvoid setup() \n{ \n    size(200,200); \n    background(20,70,105); \n}\n\nvoid draw()\n{\n    for (int i = 1; i < 7; i++)\n    {\n        drawRedSquare(25, i*25, i*20);\n    }\n}\n\nvoid drawRedSquare(int length, int xCoord, int yCoord)\n{\n    fill(255,0,0);\n    rect(xCoord,yCoord, length, length);\n}\n~~~\n\nThis code calls the drawRedSquare method multiple times (using a for loop).  \n\nRun your code.  Does it work as you would expect?  Are 6 red squares drawn on the display window?\n\nNow try re-write the for loop so that it is a while loop.  Run and test your code again.  There should be no changes in the display window.\n\n\n"},{"title":"#Writing your own methods","shortTitle":"04","contentMd":"#Writing your own methods\n\nIn this step, you will work on reproducing the code example 3.6 from your lectures.\n\n\n##Example 3.6\n\nCreate a new Processing sketch in your workspace and call it **Example_3_6**.\n\nEnter the following code into the sketchbook (don't cut and paste, write it out):\n\n~~~java\nint value = 30;\n\nvoid setup()\n{\n    int result = timestwo(value);\n    println(result);\n}\n\nint timestwo(int val) \n{ \n    val = val * 2; \n    return val; \n}\n~~~\n\nThis code calls the **timesTwo** method from the setup() method.  This means that the **timesTwo** method is only called once.\n\nThe **timesTwo** method takes in a parameter of type **int**, it multiplies the value of this parameter by 2 and then returns the value back to where the method was called from.  It stores the returned value in another variable of type **int** that is called **result**.  The value of the variable **result** is printed to the console.\n\nRun your code.  Does it work as you would expect?  Is the value 60 printed to the console?\n\n\n"},{"title":"#Exercises","shortTitle":"Exercises","contentMd":"#Exercises\n\n- For each exercise listed below, create a new sketch.\n\n- You may need to visit the [Processing website](https://processing.org/reference/) for additional information.\n\n\n##Exercise 1\n\nThe object of this exercise is to refactor the **Example 3.5** code to add a new parameter to the drawRedSquare method.  This new parameter will set the stroke of the square.  \n\nWe will also change the size of the window and the size of the square in this exercise.  \n\nThe expected output will be:\n\n![Expected output](./img/06.png)\n\nFirst, change the size of the display window to (380,340).  When you run the code, you will see that the squares are not evenly distributed throughout the window.  Make the changes so that the squares are laid out like the above image.  \n\nSecond, amend the drawRedSquare method so that a stroke value is passed as a parameter. Set the stroke to 5.\n\nRun your code...it should look like the above screenshot. \n\n\n##Exercise 2\n\nUsing the solution to Exercise 1, try produce this output:\n\n![Expected output](./img/07.png)\n\nNote that you can achieve this with just one extra line of code!\n\n\n\n\n"},{"title":"#Challenges ","shortTitle":"Challenges","contentMd":"#Challenges \n\n- You may need to visit the [Processing website](https://processing.org/reference/) for additional information.\n\n\n##Challenge 1\n\nCreate a new sketch called **lab03a_Challenge01**.\n\n![Each target is produced when we press the mouse](./img/08.png)\n\nEnter the following starting code into your sketch (you shouldn't need to make any changes to these methods for this challenge):\n\n~~~java\nvoid setup()\n{\n  size(400,400);\n  noStroke();\n}\n\nvoid draw()\n{\n}\n~~~\n\nWrite a **mousePressed** method that has one line of code in it.  This line of code should be a call to the **drawTarget** method (you will write this next), passing the values *3* and *150* as actual parameters.\n\nNow for the challenge...write a method called **drawTarget** that returns no data, but takes two paramters of type int.  \n\n- The first parameter represents the number of circles in the target i.e. **size**.  \n\n- The second parameter represents the starting grayscale colour i.e. **gray**\n\n\nThe only code in this method is a for loop.  The loop will execute enough times to draw the number of circles required (determined by **size**).  \n\n- This loop should set the fill to the value of **gray**.\n\n- Draw an ellipse at the current mouse coordinates with a diameter starting at 20 and increasing by 20 for each subsequent ellipse drawn.\n\n- Increase **gray** by 30.\n\n\nNote: remember that the solution is available on the next tab, if you need to look at it.\n\n\n##Challenge 2\n\nNow that you have the code drawing a target with 3 circles, test it so that you can easily draw targets with 6 circles etc.  You should only need to change the actual paramter passed in the **drawTarget** method.  \n\n"},{"title":"#Solutions","shortTitle":"Solutions","contentMd":"#Solutions\n\nThe solutions for this lab can be found [here](archives/lab03a_solutions.zip). \n\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\n\nAfter unzipping the solutions, it might be a good idea to copy the folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\n"}]}