{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-09c","contentMd":"#Objectives\n\nCRUD · ShopV4.0 · DVDLibraryV2.0"},{"title":"#Developing Shop V4.0 ","shortTitle":"01","contentMd":"#Developing Shop V4.0 \n\nIn this practical, you will create a new project called ShopV4.0 in IntelliJ. You will add the Driver, Store and Product classes (linked below) to this project and amend the code so that it presents the user with the following simple menu for adding, listing, updating and deleting products (see Figure 1).\n\n![Figure 1: Menu System for ShopV4.0](./img/01.png) \n\n##Starting ShopV4.0\n\nCreate a new project called ShopV4.0.\n\nCopy the following classes into the project:\n\n- [Driver.java](archives/Driver.java)\n\n- [Store.java](archives/Store.java)\n\n- [Product.java](archives/Product.java)\n\nFamiliarise yourself with these classes by reviewing the code.\n\nIn the Driver class, make the following changes to display the updated menu:\n\n![Figure 2: Menu System code for Shop V4.0](./img/02.png) \n\nAlso in the Driver class, update the switch statement that processes the menu options to be:\n\n~~~java\n            switch (option){\n                case 1:    addProduct();\n                    break;\n                case 2:    System.out.println(store.listProducts());\n                    break;\n                case 5:    System.out.println(store.cheapestProduct());\n                    break;\n                case 6:    System.out.println(store.listCurrentProducts());\n                    break;\n                case 7:    System.out.println(store.averageProductPrice());\n                    break;\n                case 8:    System.out.print(\"Enter the price barrier: \");\n                    double price = input.nextDouble();\n                    System.out.println(store.listProductsAboveAPrice(price));\n                    break;\n                default:    System.out.println(\"Invalid option entered: \" + option);\n                    break;\n            }\n~~~\n\nRun the project.  \n\n- Test options 1 and 2 to ensure you can add and list products.  \n\n- Test options 5-8 to make sure they are working as expected.\n\n- Test options 3 and 4; they should do nothing and we will add this code in the subsequent steps.\n\n"},{"title":"#Developing Shop V4.0 ","shortTitle":"02","contentMd":"#Developing Shop V4.0 \n\nContinue working with ShopV4.0 in IntelliJ.  You will add the code to delete a product, using menu option 4.\n\n![Figure 1: Menu System for ShopV4.0](./img/01.png) \n\n##Store Class - getting ready for deleting\n\nIn the Store class, add an accessor method for the ArrayList of Products i.e.:\n\n~~~java\npublic ArrayList<Product> getProducts()\n{\n\treturn products;\n}\n~~~\n\n\n##Menu Item 4:  Deleting a product\n\nIn the Driver class, make the following changes to implement case 4 (deleting a product):\n\n![Figure 2: Code for case 4](./img/05.png) \n\n![Figure 3: Code for deleting a Product](./img/06.png) \n\nRun the project (as a Java Application).\n\nAdd a product using option 1.\n\nTest option 4 and try to delete the product you just added.  \n\nDid it work?\n\nNow try to delete a product that doesn't exist e.g. enter an index of 6.\n\nWhat happened?  Did your program crash?\n\n\n##Menu Item 4:  Adding error checking\n\nIn the Driver class, make the following changes to implement error checking:\n\n![Figure 4: Error checking when deleting a product](./img/07.png) \n\nRun the project and test these three scenarios:\n\n- No products exist...try deleting a product.  The message \"No products\" should be displayed.\n\n- Create two products...try deleting a product at index 6.  A message similar to \"There is no product for this index number\" should be displayed.\n\n- With the two products created...try deleting a product at index 1.  The product is deleted.\n\n\n"},{"title":"#Developing Shop V4.0 ","shortTitle":"03","contentMd":"#Developing Shop V4.0 \n\nContinue working with ShopV4.0 in IntelliJ.  You will add the code to update a product, using menu option 3.\n\n![Figure 1: Menu System for ShopV4.0](./img/01.png) \n\n\n##Menu Item 3:  Updating a product\n\nIn the Driver class, make the following changes to implement case 3 (updating a product):\n\n![Figure 2: Code for case 3](./img/08.png) \n\n![Figure 3: Code for updating a Product](./img/09.png) \n\nRun the project.\n\nAdd a product using option 1.\n\nTest option 3 - try to update the product you just added.  \n\nDid it work?\n\nNow try to update a product that doesn't exist e.g. enter an index of 6.\n\nWhat happened?  Did your program crash?\n\n\n##Menu Item 3:  Adding error checking\n\nIn the Driver class, make the following changes to implement error checking:\n\n![Figure 4: Error checking when updating a product](./img/10.png) \n\nRun the project and test these three scenarios:\n\n- No products exist...try updating a product.  The message \"No products\" should be displayed.\n\n- Create two products...try updating a product at index 6.  A message similar to \"There is no product for this index number\" should be displayed.\n\n- With the two products created...try updating a product at index 1.  The product should be updated.\n\nSave and close this project.  \n\n\n"},{"title":"#Menu Driven DVD Specification (Phase 1)","shortTitle":"DVD 1.0","contentMd":"#Menu Driven DVD Specification (Phase 1)\n\nIn the previous practical, we worked on a new project called __DVDLibraryV1.0__.  This app presented the user with a simple menu for adding and listing DVD titles.  To refresh your memory on this project, please read the information below.\n\n\n##DVD class\n\nThe DVD class contained one instance field **title**, an empty default constructor and a getter and setter for the **title** field.  \n\nWe also wrote a second constructor that took in the title as a parameter and updated the instance field, **title**.  Finally, we wrote a toString method that formatted the object state to a user-friendly string.\n\n\n##Library class\n\nThe Library class contained one instance field called **dvds** that held an ArrayList of DVDs.  The default constructor instantiated this ArrayList.  \n\nWe wrote a method **add()** that accpeted a DVD object as a parameter. This method added the passed DVD object to the **dvds** ArrayList.\n\nWe also wrote a **listDVDs()** method that returned a String comprising the index number and the title of each DVD in the dvds ArrayList.  If there were no dvds in the ArrayList, the String \"No DVDs\" was returned.\n\n\n##Driver class\n\nThe Driver class contained an instance field called **library** that is of type **Library**.  \n\nA global Scanner object was created that could be used by all methods in the class.\n\nThe default constructor instantiated the **library** field and the Scanner object.\n\nWe wrote a private method called **addDVD()** that had a void return type.  This method read the title of the DVD from the user and added it (as a DVD object) to the ArrayList in the **Library** class.\n\nWe wrote a private method **mainMenu()** that had an int return type.  This method  displayed the name of the menu and the menu options (see Figure 1).  This method read the menu option that the user entered and returned it.\n\n![Figure 1: Menu for the DVD Library](./img/11.png) \n\nWe wrote a private method **run()** that had a void return type.  This method controlled the menu options i.e. it called the appropriate method when the user selected a menu option.\n\nFinally, we wrote a main method that created an instance of itself (i.e. the Driver class) and called the **run** method over this instance (see the code below).\n\n\n##Solution for DVD1.0\n\nIf you didn't complete DVD Phase 1, the solution [is here](archives/DVDLibraryV1.0.zip).\n\nIf you did complete it, open your DVD V1.0 code in IntelliJ.\n\n\n##Run and Test\n\nRun the DVD Phase 1 project.\n\nTest the code by adding a few DVD and listing them.  Try listing the DVDs when no DVDs have been entered (you can do this by restarting the app and listing without adding).\n\n"},{"title":"#Menu Driven DVD Specification (Phase 2)","shortTitle":"DVD 2.0","contentMd":"#Menu Driven DVD Specification (Phase 2)\n\nIn this practical, you will create a new project in IntelliJ and copy in the code from __DVDLibraryV1.0__.  You will then extend the code to allow the user to update and delete DVDs. \n\nCreate a new project called __DVDLibraryV2.0__ and copy the __src__ java files from __DVDLibraryV1.0__ to the __src__ folder in your new project,  __DVDLibraryV2.0__.\n\nNOTE:  a copy of the completed __DVDLibraryV1.0__ [is available here](archives/DVDLibraryV1.0.zip).\n\n\n##Update a DVD\n\nIn your Driver class:\n\n- add a third option to the menu:  3) Update a DVD.\n\n- in the switch statement, add a call to a new private method called updateDVD().\n\n- create an updateDVD() method that has no return type.  This method should:\n    \n    - if DVDs exist in the ArrayList, list the DVDs and ask the user which one they would like to edit.  \n        \n    - if the user types in a valid index, ask the user to enter a new title for the DVD.  \n        \n    - retrieve the DVD at the specified index and update the title using the title mutator. \n\nIn your Library class, add an accessor for the dvs ArrayList:\n\n~~~\n    public ArrayList<DVD> getDVDs()\n    {\n        return dvds;\n    }\n~~~\n\nRun your code and test this code for the following three scenarios:\n\n- No DVDs exist...try updating a DVD. The message \"No DVDs\" should be displayed.\n\n- Create two DVDs...try updating a DVD at index 6. A message similar to \"There is no DVD for this index number\" should be displayed.\n\n- With the two DVDs created...try updating a DVD at index 1. The DVD should be updated.\n\n\n##Delete a DVD\n\nIn your driver class:\n\n- add a fourth option to the menu:  4) Delete a DVD.\n\n- in the switch statement, add a call to the deleteDVD() method.\n\n- create an deleteDVD() method that has no return type.  This method should:\n    \n    - if DVDs exist in the ArrayList, list the DVDs and ask the user which one they would like to delete.  \n        \n    - if the user types in a valid index, delete the DVD at that index.  \n\nRun your code and test this code for the following three scenarios:\n\n- No DVDs exist...try deleting a DVD. The message \"No DVDs\" should be displayed.\n\n- Create two DVDs...try deleting a DVD at index 6. A message similar to \"There is no DVD for this index number\" should be displayed.\n\n- With the two DVDs created...try deleting a DVD at index 1. The DVD should be updated.\n\n\nSave and close your project."},{"title":"#Solutions","shortTitle":"Solutions","contentMd":"#Solutions\n\nThe solution to the ShopV4.0 exercise [is here](archives/ShopV4.0.zip).\n\nThe solution to DVD phase 1 [is here](archives/DVDLibraryV1.0.zip).\n\nThe solution to DVD phase 2 [is here](archives/DVDLibraryV2.0.zip).\n\nThe code from the [debug lecture is here](archives/code-from-debug-lecture.zip)\n\n\n"}]}