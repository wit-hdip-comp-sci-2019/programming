{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-05a","contentMd":"#Objectives\n\nGUI · Swing · JOptionPane · dialog boxes · primitive arrays · array syntax"},{"title":"#Using Swing - JoptionPane","shortTitle":"01","contentMd":"#Using Swing - JoptionPane\n\nIn this step, you will familiarise yourself with the JOptionPane class and particularly these methods:\n\n- showMessageDialog:  Simple message output.\n- showInputDialog: Allow the user to type in (String) input.\n- showConfirmDialog: Allow the user to choose an option.\n\n\n##showMessageDialog: Simple Message Output\n\nCreate a new Processing sketch in your workspace and call it **lab05a_JOption**.\n\nWe will use the same sketch for this entire step, so periodically save your work as you progress through it.\n\nTo use JOptionPane, we must import the Swing package:\n\n~~~java\nimport javax.swing.JOptionPane;\n~~~\n\nType in the following code in your sketch:\n\n~~~java\nJOptionPane.showMessageDialog(null,     \n\t\t\"Welcome to the 12 days of Christmas\");\n~~~\n\nRun your code.\n\nYou should get the following output:  \n\n![Using JOptionPane, showMessageDialog, for simple output](./img/01.png)\n\n\n##showMessageDialog: Adding detail to a Simple Message\n\nThe default option (above) has a small icon. \n\nTo have no such icon, you can add a 'PLAIN_MESSAGE' option.  Add this code to the above code (you now should have two JOptionPanes in your code):\n\n~~~java\nJOptionPane.showMessageDialog(null, \n  \"Welcome to the 12 days of Christmas\",\n      \"Christmas Title\",\n      JOptionPane.PLAIN_MESSAGE);\n~~~\n\nNote that we also included a title for our message.  \n\nRun your code.\n\nYou should get the following output:  \n\n![Using JOptionPane for simple output with no icon](./img/02.png)\n\n\n##showInputDialog: Entering String data via input dialog \n\nWe will now look at user input and read in a String. \n\nAdd the following code:\n\n~~~java \nString day = JOptionPane.showInputDialog(\n\t\t\t\t\"Welcome to Christmas week\\n\\n \" + \"Please enter the day: \",\n\t\t\t\t\"Monday\");\n\nprintln(\"Day is : \" + day);\n~~~\n\nRun your code.\n\nThis code should present you with this input dialog:\n\n![Using JOptionPane for reading input](./img/03.png)\n\nAlso, the print statement will print out the day of the week you entered on the console. \n\n\n##showInputDialog: Entering integers via an input dialog\n\nWe will now look at user input and read in a number. \n\nAs the input dialog reads from the user in String format, we will need to convert the String to a number if we want to do any mathematical operations on it:\n\n~~~java\nint num = Integer.parseInt(\n      JOptionPane.showInputDialog(\"Enter a number between 0 and 10\", \"3\" )\n      );\n~~~\n\nAdd this code...it simply performs a mathematical calculation on the number read in and displays the result on the console:\n\n~~~java\nnum++;\nprintln(\"Your number incremented by 1 is : \" + num);\n~~~   \n\nRun the code.  \n\nThis code should present you with this input dialog:\n\n![Using JOptionPane for reading numeric input](./img/04.png)\n\nAlso, the print statement will print out the number you entered, incremented by 1. \n\n\n##showConfirmDialog: Using a yes/no dialog\n\nSometimes we will need a simple yes/no dialog.\n\nInclude the following code in your sketch:\n\n~~~java\nint reply = JOptionPane.showConfirmDialog(null,           \n\t “Did you watch the Late Late Toy Show on Saturday night?\",            \t\n     \"Christmas Question\",   \n     JOptionPane.YES_NO_OPTION); \n~~~ \n\nAdd this code...it simply displays an int representation of your choice to the console:\n\n~~~java\nprintln(\"You chose: \" + reply);\n~~~\n\nRun the code.  \n\nYour output should now look like:\n\n![Yes/No dialog](./img/05.png)\n\nAnd it should display an int representation of your choice to the console.\n\nSave your work and close the project.\n\nWe will continue working on JOptionPane in the exercises.\n\n"},{"title":"#Using Arrays","shortTitle":"02","contentMd":"#Using Arrays\n\nIn this step, we will introduce the use of arrays, in a similar manner as discussed in your lectures.  Instead of reading in 10 numbers, we will just look at using 5.\n\n\n##No arrays - reading in 5 numbers and adding them \n\nHere you will use JOptionPane to read in 5 numbers, add them together and print their sum in the console window. \n\nCreate a new Processing sketch in your workspace and call it **lab05a_Arrays_01**.\n\nType the following code into your sketch:\n\n~~~java \nimport javax.swing.*;  \n\nint number = 0;\nint sum = 0;\n\nfor (int i = 0; i<5; i++)  {    \n   number = Integer.parseInt(JOptionPane.showInputDialog(\n   \t\t\t\t\t\"Please enter a number \", \"3\")\n   \t\t\t\t\t);    \n   sum += number;  \n}\n\nprintln(\"The sum of the values you typed in is : \" +   sum);\n~~~\n\nRun your code. \n\nThe sum of the 5 numbers you have entered should be printed to the console e.g. \n\n~~~\nThe sum of the values you typed in is : 15\n~~~\n\nSave your work, but don't close the sketch.\n\n\n##No arrays - adding 5 numbers and remembering them \n\nIn the above sketch, we read in 5 numbers and printed out a running total of the numbers.  However, we didn't store the numbers we entered.  Here, we will refactor our code (not using arrays) to save the 5 entered numbers.  \n\nSave your exsiting sketch as  **lab05a_Arrays_02**\n \nRefactor your code so that it declares 5 variables; these variables are then used to store each of the entered numbers.  Then print out the sum of the numbers, along with the actual numbers entered.  The code is here:\n\n~~~java\nimport javax.swing.*;  \n\nint n0, n1, n2, n3, n4;\nint sum = 0;\n\nn0 = Integer.parseInt(JOptionPane.showInputDialog(\"Please enter a number \", \"3\"));\nsum += n0;\n\nn1 = Integer.parseInt(JOptionPane.showInputDialog(\"Please enter a number \", \"3\"));\nsum += n1;\n\nn2 = Integer.parseInt(JOptionPane.showInputDialog(\"Please enter a number \", \"3\"));\nsum += n2;\n\nn3 = Integer.parseInt(JOptionPane.showInputDialog(\"Please enter a number \", \"3\"));\nsum += n3;\n\nn4 = Integer.parseInt(JOptionPane.showInputDialog(\"Please enter a number \", \"3\"));\nsum += n4;\n\nprintln(\"The sum of the values you typed in is : \" + sum);\nprintln(\"Number 1 is: \" + n0);\nprintln(\"Number 2 is: \" + n1);\nprintln(\"Number 3 is: \" + n2);\nprintln(\"Number 4 is: \" + n3);\nprintln(\"Number 5 is: \" + n4);\n~~~\n\nRun your code. The sum of the 5 numbers you have entered should be printed to the console, along with the numbers you just entered e.g.\n\n~~~\nThe sum of the values you typed in is : 15\nNumber 1 is: 5\nNumber 2 is: 4\nNumber 3 is: 3\nNumber 4 is: 2\nNumber 5 is: 1\n~~~\n\nSave your work, but don't close the sketch.\n\n\n##Using arrays to store and add numbers \n\nHere you will use JOptionPane to read in 5 numbers into an array, add them together and print their sum in the console window. In this code, we declare an integer array of size 5(allowing 5 values to be stored from index 0 to 4).\n\nSave your exsiting sketch as  **lab05a_Arrays_03**\n\nRefactor your code so that it is the same as below:\n\n~~~java\nimport javax.swing.*;  \n\nint numbers[] = new int[5];             \nint sum = 0;\n\nfor (int i = 0; i < 5 ; i ++)  {    \n\tnumbers[i] = Integer.parseInt(JOptionPane.showInputDialog(\n\t\"Please enter a number \", \"3\"));  \n}      \n\nfor (int i = 0; i < 5 ; i ++)   {   // now we sum the values and print each value \n \t  sum += numbers[i];  \n      println(\"Number \" + (i+1) + \" is: \" + numbers[i]);\n} \n\n println(\"The sum of the values you typed in is : \" + sum);\n~~~   \n\nRun your code. \n\nThe sum of the 5 numbers you have entered should be printed to the console, along with the numbers you just entered e.g.\n\n~~~\nThe sum of the values you typed in is : 15\nNumber 1 is: 5\nNumber 2 is: 4\nNumber 3 is: 3\nNumber 4 is: 2\nNumber 5 is: 1\n~~~\n\nNotice that the output from this code, is the same as the output from **lab05a_Arrays_02** above.  However, the code here is much more maintainable (e.g. we could very easily refactor this to read in 100 numbers).\n\nSave your work, but don't close the sketch.\n\n\n##Inputting the size of the array\n\nA primitive array is of fixed size. So once you construct (using new) the array, you cannot change its size. However, you can read in this value (size of the array) before constructing the array.  The next piece of code demonstrates this approach.\n\nSave your exsiting sketch as  **lab05a_Arrays_04**\n\nRefactor your code so that it is the same as below (notice how we use now numData in the boolean expression of the for loop):\n\n~~~java\nimport javax.swing.*;  \n\nint numbers[];\nint numData = Integer.parseInt(JOptionPane.showInputDialog(\"How many values do you wish to sum? \", \"3\"));\n//now, use this value to make the array this size.\nnumbers = new int[numData];             \n\nint sum = 0;\n\nfor (int i = 0; i < numData ; i ++)  {    \n  numbers[i] = Integer.parseInt(JOptionPane.showInputDialog(\n  \"Please enter a number \", \"3\"));  \n}      \n\nfor (int i = 0; i < numData ; i ++)   {   // now we sum the values and print each value \n     sum += numbers[i];  \n      println(\"Number \" + (i+1) + \" is: \" + numbers[i]);\n} \n\nprintln(\"The sum of the values you typed in is : \" + sum);\n~~~ \n\nRun your code and test it, in particular, by entering four values. \n\nThe sum of the numbers you have entered should be printed to the console, along with the numbers you just entered e.g.\n\n~~~\nNumber 1 is: 9\nNumber 2 is: 8\nNumber 3 is: 4\nNumber 4 is: 3\nThe sum of the values you typed in is : 24\n~~~\n\nVerify that the printed sum, is the correct tally of the values entered.\n\nSave your work and close the project.\n\n\n"},{"title":"#Exercises","shortTitle":"Exercises","contentMd":"#Exercises\n\nThe exercises are based mainly on Arrays, with some use of JOptionPane.\n\nFor each exercise below, create a new sketch and save your work.\n\n\n##Exercise 1 \n\nWrite a program to declare and construct an int array (called numbers) of size 10. \n\nInitialise the array by putting 20 in each of the elements of the array. \n\nPrint out the values to the console (each value should be printed to a new line) e.g. \n\n~~~\nNumber 1 is: 20\nNumber 2 is: 20\nNumber 3 is: 20\nNumber 4 is: 20\nNumber 5 is: 20\nNumber 6 is: 20\nNumber 7 is: 20\nNumber 8 is: 20\nNumber 9 is: 20\nNumber 10 is: 20\n~~~\n\n\n##Exercise 2\n\nWrite a program to declare and construct an int array (called numbers) of size 5. \n\nRead in 5 values and store them in the array.  \n\nPrint out the values to the console (one line at a time) in the reverse order to the order they were entered in.  For example, if we entered 3, 4, 5, 6 and 7, the output should be:\n\n~~~\nNumber 5 is: 7\nNumber 4 is: 6\nNumber 3 is: 5\nNumber 2 is: 4\nNumber 1 is: 3\n~~~\n\n\n##Exercise 3\n\nWrite a program to declare and construct an int array (called numbers) with the size determined by the user.\n\nRead in a value for each element in the array and store it.\n\nUse a for loop to print out every second value stored in the array to the console.  For example, if we choose to enter 8 numbers and then enter the following numbers: 5, 6, 7, 8, 9, 10, 11, 12, we should expect our output to be:\n\n~~~\nNumber 1 is: 5\nNumber 3 is: 7\nNumber 5 is: 9\nNumber 7 is: 11\n~~~\n\n\n##Exercise 4\n\nWrite a program to declare and construct an int array (called numbers) with the size determined by the user.\n\nRead in a value for each element in the array and store it.\n\nPrint out only the even numbers stored in the array to the console (hint: use the % operator).  For example, if we choose to enter 6 numbers and then enter the following numbers: 6, 7, 8, 10, 11, 12, we should expect our output to be:\n\n~~~\nNumber 1 is: 6\nNumber 3 is: 8\nNumber 4 is: 10\nNumber 6 is: 12\n~~~\n\n"},{"title":"#Challenge","shortTitle":"Challenges","contentMd":"#Challenge\n\nThe challenges are on JOptionPane today.\n\n##Challenge 1 - JOptionPane\n\n~~~java\nJOptionPane.showMessageDialog(null, \n  \"Welcome to the 12 days of Christmas\",\n      \"Christmas Title\",\n      JOptionPane.PLAIN_MESSAGE);\n~~~\n\nThe above code produces this message dialog, with a message type of PLAIN_MESSAGE:\n\n![Using JOptionPane for simple output with no icon](./img/02.png)\n\nVisit the Java API for JOptionPane:  <https://docs.oracle.com/javase/7/docs/api/javax/swing/JOptionPane.html> and look for the **messageType** description, i.e. :\n\n~~~\nmessageType\n\nDefines the style of the message. The Look and Feel manager may lay out the dialog differently depending on this value, and will often provide a default icon. The possible values are:\n\n  ERROR_MESSAGE\n  INFORMATION_MESSAGE\n  WARNING_MESSAGE\n  QUESTION_MESSAGE\n  PLAIN_MESSAGE\n~~~\n\nCreate a new sketch and experiment with these message type options and note the changes in the output.\n\n\n##Challenge 2 - JOptionPane\n\n~~~java\nint reply = JOptionPane.showConfirmDialog(null,           \n\t “Did you watch the Late Late Toy Show on Saturday night?\",            \t\n     \"Christmas Question\",   \n     JOptionPane.YES_NO_OPTION); \n~~~ \n\nThe above code produces this confirm dialog, with a yes/no button option:\n\n![Yes/No dialog](./img/05.png)\n\nReturn to the Java API for JOptionPane:  <https://docs.oracle.com/javase/7/docs/api/javax/swing/JOptionPane.html> and look for the **optionType** description, i.e. :\n\n~~~\noptionType\n\nDefines the set of option buttons that appear at the bottom of the dialog box:\n\n  DEFAULT_OPTION\n  YES_NO_OPTION\n  YES_NO_CANCEL_OPTION\n  OK_CANCEL_OPTION\n~~~\n\nCreate a new sketch and experiment with these option types and note the changes in the output.\n\n"},{"title":"#Solutions","shortTitle":"Solutions","contentMd":"#Solutions\n\nThe solutions for this lab can be found [here](archives/lab05a_solutions.zip). \n\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\n\nAfter unzipping the solutions, it might be a good idea to copy the folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\n"}]}