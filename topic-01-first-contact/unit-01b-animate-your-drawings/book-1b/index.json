


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-1b",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>animate simple drawings · variables · system variables · primitive data types · arithmetic operators</p>",
  "folder" : "book-1b",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-1b",
    "contentMd" : "#Objectives\n\nanimate simple drawings · variables · system variables · primitive data types · arithmetic operators"
    },
  
    {
    "title": "#Opening the PDE (Processing Development Environment)",
    "shortTitle": "PDE",
    "contentMd" : "#Opening the PDE (Processing Development Environment)\n\nGo to the directory/folder where you installed your processing app.  \n\nYou should see a list of files and folders similar to the image below:\n\n![Processing Development Environment files](./img/01.png)\n\nDouble click in the **processing** application (highlighted by the red rectangle).\n\nThe PDE (Processing Development Environment) should launch.\n\n![The Processing Development Environment](./img/02.png)\n\n"
    },
  
    {
    "title": "#Basic Animation",
    "shortTitle": "01",
    "contentMd" : "#Basic Animation\n\n- We will use the following built-in functions to animate our drawings:\n    - setup()\n    - draw()\n    \n##A note on the setup() function\n\n- setup() is called once when the program starts and should not be called again.\n- setup() can set the screen size and background colour. \n- There can only be one setup() function for each sketch.\n\n##A note on the draw() function\n\n- You should never call the draw() function.\n- Processing automatically calls the draw() function straight after the setup() call.\n- draw() continuously executes the code contained inside it.\n- There can only be one draw() function for each sketch.\n\n\n##Animating Ellipses\n\nIn your PDE, enter the following code:\n\n![Animating Ellipses](./img/03.png)\n\nUsing the **File**, **Save as...** menu options, save this sketchbook as **lab01b_step02**.\n\nRun the code.  As you move your mouse around the canvas, you should have animation similar to the screen shot below.\n\n![Animating Ellipses - Multiple Circles](./img/04.png)\n\nCan you explain why there are multiple circles drawn?  Why not just one circle? \n\n"
    },
  
    {
    "title": "#Animating Ellipses (continued)",
    "shortTitle": "02",
    "contentMd" : "#Animating Ellipses (continued)\n\nWe are now going to change the code (from the previous step) so that only one circle is shown when you move the mouse.\n\nAmend your code so that the background function is in the draw method instead of the setup method:\n\n![Animating Ellipses - One Circle](./img/05.png)\n\nRun the code.  As you move the mouse over the canvas, you should have animation similar to the screen shot below.\n\n![Animating Ellipses - One Circle](./img/06.png)\n\nCan you explain why there is only one circle drawn as we move our mouse? \n\n"
    },
  
    {
    "title": "#Playing with the System Variables",
    "shortTitle": "03",
    "contentMd" : "#Playing with the System Variables\n\nWhat would happen to our animation if we swapped the **mouseX** and **mouseY** system variables in the **ellipse** function with each other?  \n\nMake this change (the code change is below, if you need it) and see if you can figure out what is going on.\n\n~~~   \n    ellipse(mouseY, mouseX, 100, 100)\n~~~\n\nNow, what would happen to our animation if we changed our ellipse function to be this:\n\n~~~   \n    ellipse(width, mouseY, 100, 100)\n~~~\n\nMake this change and see if you can figure out what is going on.\n\nSave your work (we will use a new sketch for step05).\n\n"
    },
  
    {
    "title": "#Primitive Data Types",
    "shortTitle": "04",
    "contentMd" : "#Primitive Data Types\n\nIn Java, there are:\n- four whole number data types:  byte, short, int, long.\n- two decimal number data types: float (default in Processing) and double (default in Java apps).\n- a single character data type: char.\n- a true/false data type: boolean.\n\n\n##Using the int data type\n\nCreate a new Sketchbook in your PDE and save it as **lab01b_step05**.\n\nEnter the following code:\n\n![Using int data type to set the coordinates of three lines](./img/07.png)\n\nRun the code.  Your window should now have three blue lines similar to the screen shot below:\n\n![Three blue lines](./img/08.png)\n\nUpdate the code using a,b,c and d variables to generate new lines:\n\n![Using int data type to set the coordinates of more lines](./img/09.png)\n\nRun the code.  Your window should now have three new blue lines similar to the screen shot below:\n\n![Six blue lines](./img/10.png)\n\n\n##A syntax error\n\nUpdate the code by changing **int** to **Int** (uppercase I).  Run your code again.  What happened? Can you explain what happened?  Ask your lecturer to explain it if you are not sure. \n\nChange **Int** back to **int**.\n\n\n##Another syntax error\n\nUpdate the code by changing the amount assigned to variable **a** from 70 to 70.56.  \n\nRun your code again.  What happened? Can you explain what happened?  Ask your lecturer to explain it if you are not sure. \n\nChange 70.56 back to 70.\n\nSave and close the sketchbook.\n\n"
    },
  
    {
    "title": "#Primitive Data Types",
    "shortTitle": "05",
    "contentMd" : "#Primitive Data Types\n\n\n##Using the float data type\n\nCreate a new Sketchbook in your PDE and save it as **lab01b_step06**.\n\nEnter the following code:\n\n![Using the float data type to set the coordinates of a square](./img/11.png)\n\nRun the code.  You should see a grey window with a white square drawn in it.\n\n\n##Not a syntax error!\n\nUpdate the code by changing the amount assigned to the xCoordinate variable from 50.67 to just 50.\n\nRun the code.  Why did it work? Can you explain what happened?  Ask your lecturer to explain it if you are not sure. \n\nChange the amount assigned to the xCoordinate variable back to 50.67.\n\n\n##A syntax error\n\nUpdate the code by changing **float** to **double**.  \n\nYou have a syntax erorr.  Can you explain why?  Ask your lecturer to explain it if you are not sure. \n\nChange **double** back to **float**.\n\n\n##Another syntax error\n\nUpdate the code by renaming the **yCoordinate** variable name to **xCoordinate**, as shown below:\n\n~~~java\nfloat xCoordinate = 50.67;\nfloat xCoordinate = 100.33;\nrect(xCoordinate, yCoordinate, 80,80);\n~~~\n\nYou have a syntax error...can you explain why?  Ask your lecturer to explain it if you are not sure. \n\nChange the code back.\n\nSave and close the sketchbook.\n\n\t"
    },
  
    {
    "title": "#Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "#Exercises\n\nThe exercises are typically based on the material we covered in the previous steps in this lab and the associated lectures.\n\nFor each exercise listed below, open a new sketch.\n\n\n##Exercise 1 (static drawing)\n\nIn Step04 we entered this code:\n\n![Six blue lines](./img/09.png)\n\nWhich produced this output:\n\n![Six blue lines](./img/10.png)\n\nUsing this code as a starting point, make the following changes so that your output looks like this:\n\n![Desired output](./img/12.png)\n\nNOTE: the object of this exercise is to use the arithmetic operators on the variables (a,b,c).\n\n\n##Exercise 2 (static drawing)\n\nThe object of this exercise is to produce the same output as Exercise 1, but instead of using variables (a,b,c) use the **width** and **height** system variables and perform artihmetic calculations on them to produce the desired output.\n\n\n##Exercise 3 (animated drawing)\n\nProduce the following animation:\n\n- a white circle is drawn when you move the mouse; only one circle is visible at one time (i.e. all previous ones are cleared).\n\n- the x and y coordinates for the circle are dependent on the mouse position (hint: use system variables mouseX and mouseY).\n\n- the size of the circle is determined by the y mouse coordinate.\n\n\nWhen you run your code, your circle should grow in size as you move your mouse pointer down the window and reduce in size when you move your mouse up the window.  When you move your mouse horizontally, the circle should stay the same size.\n\n\n##Exercise 4 (animated drawing)\n\nUsing exercise 3 as a starting point, add the following animation to it:\n\n- a black circle is drawn when you move the mouse (all previous black circles are cleared).\n\n- the x coordinate for the circle is the mouseY coordinate and the y coordinate for the circle is mouseX.\n\n- the size of the circle is determined by the x mouse coordinate.\n\n\nWhen you run your code, the black circle should overlap the white circle when you drag your mouse from (0,0) diagnolally down to (100,100).  When you move your mouse horizontally, the black circle show grow/shrink in size.  It remains the same size when the mouse is dragged vertically.  Note that the white circle's behaviour hasn't changed.\n\n"
    },
  
    {
    "title": "#Challenges",
    "shortTitle": "Challenges",
    "contentMd" : "#Challenges\n\nFor each exercise listed below, open a new sketchbook.\n\nYou may need to visit the [Processing website](https://processing.org/reference/) for additional information.\n\n\n##Challenge 1 (animated drawing with no cursor)\n\nDo some research to figure out how to turn the mouse pointer (cursor) off.\n\nImplement this functionality in any one of the exercises from the previous step.\n\n\n##Challenge 2 (animated drawing with a different cursor)\n\nDo some research to figure out how to turn the mouse pointer (cursor) into a *hand*.\n\nImplement this functionality in any one of the exercises from the previous step.\n\n\n##Challenge 3 (animated drawing using a drag effect)\n\nDo some research into the Processing variables:  pmousex and pmousey.\n\nWrite a Processing sketch that uses these variables. \n\n"
    },
  
    {
    "title": "#Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\n\nThe solutions for this lab can be found [here](archives/lab01b_solutions.zip). \n\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\n\nAfter unzipping the solutions, it might be a good idea to copy the folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\n"
    }
  
  ]
  }

