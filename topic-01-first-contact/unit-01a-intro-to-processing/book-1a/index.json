{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-1a","contentMd":"#Objectives\n\nstatic drawings 路 basic shapes 路 colour 路 grayscale 路 RGB"},{"title":"#Lab advice","shortTitle":"Advice","contentMd":"#Lab advice\n\n- Your labs are not a race to be the first student finished.\n\n- It is very important that you:\n    - take your time.\n    - read the instructions carefully.\n    - ask your lecturer to explain concepts that you don't understand; that is what we are here for!\n\n- Where code is given in labs, resist the urge to cut and paste it; maximise your learning by typing the code in.\n\n- The more mistakes you make when working through these labs, the more you learn.  If you reach the end of the lab and you haven't made any mistakes, a good learning exercise would be to try to produce syntax / logic errors and troubleshoot them. \n\n"},{"title":"#Opening the PDE (Processing Development Environment)","shortTitle":"PDE","contentMd":"#Opening the PDE (Processing Development Environment)\n\nGo to the directory/folder where you installed your processing app.  \n\nYou should see a list of files and folders similiar to the image below:\n\n![Processing Development Environment files](./img/04.png)\n\nDouble click in the **processing** application (highlighted by the red rectangle).\n\nThe PDE (Processing Development Environment) should launch.\n\n![The Processing Development Environment](./img/05.png)\n\n"},{"title":"#Exercise 1 - Induction","shortTitle":"01","contentMd":"#Exercise 1 - Induction\n\nIn exercise 1, we started with this code:\n\n~~~java\n//Setting up the display window\nsize(400,300);\nbackground(100); \n\n//Drawing a rectangle\nrect(20,30,50,30);\n\n//Drawing a square\nrect(40,5,20,20);\n\n//Drawing a line\nline(5,30,20,90);\n\n//Drawing an ellipse\nellipse(85,50,20,60);\n\n//Drawing an circle\nellipse(50,80,15,15);\n~~~\n\nwhich produced this output:\n\n![Induction Exercise 1 - output from starting code](./img/06.png)\n\nThe exercise asked you to change the above code so that the following output was produced:\n\n![Induction Exercise 1 - solution output](./img/07.png)\n\n\n##Solution to Induction Exercise 1\n\nThe solution to exercise 1 from Induction was this:\n\n~~~java\n//Setting up the display window\nsize(400,300);\nbackground(100); \n\n//Drawing a rectangle\nrect(100,100,200,100);\n\n//Drawing a square\nrect(150,200,20,20);\n\n//Drawing a line\nline(100,100,300,200);\n\n//Drawing an ellipse\nellipse(200,100,20,60);\n\n//Drawing an circle\nellipse(250,130,25,25);\n~~~\n\nNotice that the only changes were the values of the **actual parameters** passed to the functions. \n\n"},{"title":"#Using RBG for display window background","shortTitle":"02","contentMd":"#Using RBG for display window background\n\nIn the Induction, Exercise 1, we used the Grayscale colour scheme to colour our background:\n\n![Induction Exercise 1 - solution output](./img/07.png)\n\n~~~java\n//Setting up the display window\nsize(400,300);\nbackground(100); \n\n//Drawing a rectangle\nrect(100,100,200,100);\n\n//Drawing a square\nrect(150,200,20,20);\n\n//Drawing a line\nline(100,100,300,200);\n\n//Drawing an ellipse\nellipse(200,100,20,60);\n\n//Drawing an circle\nellipse(250,130,25,25);\n~~~\n\nIf you haven't done so in the previous step, enter the above code into a new Processing sketch and run it to ensure your code is working as expected.\n\n\n##background() function\n\nThe background() function sets the background colour of the display window. \n\nThe **background** function is *overloaded*.  This means that we can use the same function name with different sets of parameters e.g. :\n\n~~~\n    background (g)\n        g = grayscale colour (a number between 0 and 255 inclusive)\n\n    background(r,g,b)\n        r = red colour   (a number between 0 and 255 inclusive)\n        g = green colour (a number between 0 and 255 inclusive)\n        b = blue colour  (a number between 0 and 255 inclusive)\n~~~\n\nIn the above code, we used the Grayscale version of the background function. \n\nNow we will try the RBG version of background, which will use a combination of RGB (red, green and blue) values to display a colour on the window.  \n\nVisit the following website and choose a colour you like:\n\n<a href=\"https://color.adobe.com/create/color-wheel/\" target=\"_blank\">Adobe Colour Wheel Site</a>  \n\nIn your open sketch, amend the background() function to accept the RGB values for your selected colour as parameters.\n\nFor example, we chose a light blue:  \n\n~~~\n    background(190,240,245);\n~~~\n   \n![Setting an RGB background for the display window](./img/08.png)\n\n"},{"title":"#Changing the look of the shapes","shortTitle":"03","contentMd":"#Changing the look of the shapes\n\nIn this step, we will look at colouring in the shapes we have just drawn and also changing their outline.\n\n\n##fill() function\n\nThe fill() function fills shapes with a chosen colour.  We will use the RGB colours to select a colour.  All shapes that are drawn after the **fill** function is called, will be filled with the chosen colour.  \n\nThe syntax of the RGB **fill** function is similar to the **background** function and is:\n\n~~~\n    fill(r,g,b)\n        r = red colour (a whole number between 0 and 255 inclusive)\n        g = green colour (a whole number between 0 and 255 inclusive)\n        b = blue colour (a whole number between 0 and 255 inclusive)\n~~~\n\nIn your open sketchbook, enter the following code before you draw any shapes:\n\n~~~\n    fill(100,150,70);\n~~~\n\nRun your code; all your shapes should be coloured dark green.\n\nNow we will set the ellipses to be a different colour i.e. light green.  Enter the following code before your first ellipse() function call.\n\n~~~\n    fill(200,250,70);\n~~~\n\n\n##Order of statements matter\n\nNote how the order of statements matter.  All shapes drawn after the first fill() function is called are coloured dark green.  All shapes drawn after the second fill() function is called are coloured light green (see picture below):\n\n![Shapes filled with different green colours](./img/09.png)\n\n\nTry moving the first ellipse() function call **before** the second fill() function call.  What happened?  Only the second ellipse is coloured light green.   \n\nMove the ellipse function back to it's original location so both ellipses are coloured light green.\n\n\n##noStroke() function\n\nA **stroke** is the outline of a shape.  The noStroke() function disables the outline on shapes that are drawn after the function is called.  \n\nIn your open sketchbook, enter the following code before your draw any shapes:\n\n~~~\n    noStroke();\n~~~\n\nWhen you run your code, you should have something similar to this:\n\n![Shapes filled, but with no stroke](./img/10.png)\n \n\n##stroke() function\n\nThe stroke() function enables the outline on shapes that are drawn after the function is called.  When you call stroke(), you need to specify a colour.\n\nThe syntax of the **stroke** function is also similar to the **fill** and **background** function and is:\n\n~~~\n    stroke(r,g,b)\n        r = red colour (a whole number between 0 and 255 inclusive)\n        g = green colour (a whole number between 0 and 255 inclusive)\n        b = blue colour (a whole number between 0 and 255 inclusive)\n~~~\n\nIf we wanted **all** shapes **except** the first ellipse (the oval) to have a stroke, you should make the following changes:\n\n- remove the call to **noStroke()** that you just put into your code.\n- call **noStroke()** before the first ellipse is drawn.\n- call **stroke(0,0,0)** before the second ellipse is drawn to enable a black stroke on the second ellipse.\n\nYour output should look similar to this:\n\n![Shapes filled - noStroke on the oval](./img/11.png)\n\n\n##strokeWeight() function\n\nThe strokeWeight() function allows you to choose the thickness of a line/outline on shapes.  The chosen thickness will apply to all lines/shapes that are drawn after the function is called.  The thickness is specified in pixels and the default thickness is 1 pixel.\n\nIf we wanted **all** shapes to have thickness of 3 pixels, enter the following code before you draw any shapes:\n\n~~~\n    strokeWeight(3);\n~~~\n\nYour output should look similar to this:\n\n![Playing with stroke weight](./img/12.png)\n\n"},{"title":"#Exercises","shortTitle":"Exercises","contentMd":"#Exercises\n\n- The exercises are typically based on the functions we covered in the previous steps in this lab (and the associated lectures).\n\n- For each exercise listed below, open a new sketch.\n\n- In this module, the **Challenge Exercises** are exactly that...challenges!  So if you can't do them straight away (or at all), don't panic.  In most cases, they require additional thinking and research.  You may need to visit the [Processing website](https://processing.org/reference/) for additional information to attempt them.\n\n\n##Exercise 1\n\nReplicate the basic Microsoft logo as shown in the picture below:\n\n![Basic Microsoft Logo](./img/13.png)\n\nHint:  You could use [this website](http://designpieces.com/2014/11/brand-colours/) to find the exact Microsoft RGB colours in their logo.\n\n\n##Exercise 2\n\nReplicate the beats (Dr. Dre) logo as shown in the picture below:\n\n![Dr. Dre logo](./img/14.png)\n\n\n##Exercise 3\n\nConvert the Microsoft logo into a grayscale logo as shown in the picture below:\n\n![Greyscale version of the Microsoft logo](./img/15.png)\n\nHint: the easiest way to do this is to use the grayscale **fill** function as opposed to the RBG version of it.  The grayscale version of **fill** takes one parameter, a number between 0 and 255 inclusive.  This numver represents a shade of gray between black (0) and white (255) e.g.:\n\n~~~\n    fill(150);   //sets a medium gray colour for all shapes drawn after it\n    fill(0);     //sets a black colour for all shapes drawn after it\n    fill(255);   //sets a white colour for all shapes drawn after it\n~~~ \n\n\n##Challenge 1\n\nWrite the code that will draw the typical control buttons you would see on a media player.  An example image would be:\n\n![Media player controls](./img/16.png)\n\nHint: you will need to read up on the triangle() function on the [Processing website](https://processing.org/reference/triangle_.html).\n\n\n##Challenge 2\n\nDraw any picture you fancy as your profile picture for social media.  No need to actually change your profile picture, just play around with drawing one!\n\n\n"},{"title":"#Solutions","shortTitle":"Solutions","contentMd":"#Solutions\n\nThe solutions for this lab can be found [here](archives/lab01a_solutions.zip). \n\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\n\nAfter unzipping the solutions, it might be a good idea to copy the folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\n"}]}