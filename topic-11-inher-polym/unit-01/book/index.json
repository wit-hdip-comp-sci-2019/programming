{"type":"lab","chapters":[{"title":"#Objectives","shortTitle":"Lab-11","contentMd":"#Objectives\n\nSocial Network app · Inheritance · Polymorphism · Overriding"},{"title":"#Network-V1","shortTitle":"V1","contentMd":"#Network-V1\n\nIn this step, you will familiarise yourself with the original version of the Network example (without inheritance).\n\n\n##Creating Network V1 Project\n\nIn IntelliJ, create a new project called Network-V1.\n\nCopy the following classes into the project:\n\n- [MessagePost.java](archives/v1/MessagePost.java)\n\n- [NewsFeed.java](archives/v1/NewsFeed.java)\n\n- [PhotoPost.java](archives/v1/PhotoPost.java)\n\n\n##Testing the project\n\nIn the above project, create a new class called Test.  Copy the following code into it:\n\n- [Test.java](archives/v1/Test.java)\n\nThis class is a **test harness** and tests the three classes by performing the following actions:\n \n- Create 2 MessagePost objects.\n- Create 2 PhotoPosts objects.\n- Create 1 NewsFeed object.\n- Add 1 PhotoPost object to the NewsFeed object.\n- Add 1 MessagePost object to the NewsFeed object.\n- Add another PhotoPost object to the NewsFeed object.\n- Add another MessagePost object to the NewsFeed object.\n- List all messagePost and photoPosts from the NewsFeed object.\n\n\nRun this test class and interrogate the output. \n\nNote the order of the posts...figure out why the order is different than the\norder of input.\n\n![Output from Test.java](./img/00.png) \n\n\n##Moving onto the next version\n\nBefore moving onto v2, ensure that you:\n\n- understand the code in v1. \n\n- notice the code duplication and the problems that it could cause.\n\n\n##Solution\n\nThe solution to network-v1 is [here](archives/network-solution-v1.zip).\n\n"},{"title":"#Network-V2","shortTitle":"V2","contentMd":"#Network-V2\n\nIn this step, you will familiarise yourself with the second version of the Network example (with inheritance).  \n\n\n##Creating Network V2 Project\n\nIn IntelliJ, create a new project called Network-V2.\n\nCopy the following classes into the project:\n\n- [MessagePost.java](archives/v2/MessagePost.java)\n\n- [NewsFeed.java](archives/v2/NewsFeed.java)\n\n- [PhotoPost.java](archives/v2/PhotoPost.java)\n\n- [Post.java](archives/v2/Post.java)\n\n\n##Testing the project\n\nIn the above project, create a new class called Test.  Copy the following code into it:\n\n- [Test.java](archives/v2/Test.java)\n\nThis test class will repeat these steps that you did with v1:\n\n- Create 2 MessagePost objects.\n- Create 2 PhotoPosts objects.\n- Create 1 NewsFeed object.\n- Add 1 PhotoPost object to the NewsFeed object.\n- Add 1 MessagePost object to the NewsFeed object.\n- Add another PhotoPost object to the NewsFeed object.\n- Add another MessagePost object to the NewsFeed object.\n- List all messagePost and photoPosts from the NewsFeed object.\n\nNote the difference in the order (the details are now printed in the order they were entered).\n\n![Output from Test.java](./img/01.png) \n\nNote that all the details associated with each post are not displayed when we \"List all posts\"?  Why do you think details are missing?  Note:  we will fix this later in the lab.\n\n\n##Solution\n\nThe solution to network-v2 is [here](archives/network-solution-v2.zip).\n\n"},{"title":"#Exercises","shortTitle":"Exercises","contentMd":"#Exercises\n\nThese exercises are based on the exercises in Chapter 8 of Objects First with Java - A Practical Introduction Using Bluej, by David Barnes & Michael Kolling).\n\n##Exercise 1\n\nOrder the following items into an inheritance hierarchy : \n\n- Apple\n\n- IceCream\n\n- Bread\n\n- Fruit\n\n- FoodItem\n\n- Cereal\n\n- Dessert\n\n- ChocolateMousse\n\n- Baguette\n\n\n##Exercise 2\n\nAssume that we have four classes : \n\n- Person\n\n- Teacher\n\n- Student\n\n- PhDStudent\n\n\nTeacher and Student are both subclasses of Person. PhDStudent is a subclass of Student.\n\n- Which of the following assignments are legal and why or why not:\n\n~~~\nPerson p1 = new Student(); \nPerson p2 = new PhDStudent (); \nPhDStudent phd1 = new Student(); \nTeacher t1 = new Person(); \nStudent s1 = new PhDStudent ();\n~~~\n\n\n##Exercise 3\n\nGiven the Person hierarchy from Exercise 2, suppose that we have the following legal declarations and assignments:\n\n~~~java\nPerson p1 = new Person(); \nPerson p2 = new Person (); \nPhDStudent phd1 = new PhDStudent(); \nTeacher t1 = new Teacher(); \nStudent s1 = new Student ();\n~~~\n\n- Based on those just mentioned, which of the following assignments are legal and why or why not?\n\n~~~\ns1 = p1; \ns1 = p2; \np1 = s1; \nt1 = s1; \ns1 = phd1; \nphd1 = s1;\n~~~\n\n\n"},{"title":"#Solutions","shortTitle":"Solutions","contentMd":"#Solutions\n\n\n##Exercise 1 Solution\n\nThe question was...order the following items into an inheritance hierarchy : \n\n\n- apple\n\n- ice-cream\n\n- bread\n\n- fruit\n\n- food-item\n\n- cereal\n\n- dessert\n\n- chocolate mousse\n\n- baguette\n\n\nThe answer is:\n\n![FoodItem Hierarchy](./img/02.png) \n\n\n##Exercise 2\n\nIn the Person hierarchy, Teacher and Student are both subclasses of Person. PhDStudent is a subclass of Student.\n\n![Person Hierarchy](./img/03.png) \n\n~~~java\nPerson p1 = new Student();  // This is legal because a Student \"is a\" Person.  \n\t\t\t\t\t\t\t// We are following the direction of the arrows in the \n\t\t\t\t\t\t\t// inheritance diagram.\n~~~\n\n~~~java\nPerson p2 = new PhDStudent (); // This is legal because a PhDStudent \"is a\" Person.\n  \t\t\t\t\t\t\t   // We are following the direction of the arrows in the \n  \t\t\t\t\t\t\t   // inheritance diagram.\n~~~\n\n~~~java\nPhDStudent phd1 = new Student(); // This is NOT legal because a Student \"may not be\" \n\t\t\t\t\t\t\t\t // a PhDStudent.  We are going against the direction  \n\t\t\t\t\t\t\t\t // of the arrows in the inheritance diagram.\n~~~\n\n~~~java\nTeacher t1 = new Person();    // This is NOT legal because a Person \"may not be\" \n\t\t\t\t\t\t\t  // a Teacher.  For example, the Person could be a Student.  \n\t\t\t\t\t\t\t  // We are going against the arrows in the \n\t\t\t\t\t\t\t  // inheritance diagram.\n~~~\n\n~~~java\nStudent s1 = new PhDStudent();  //This is legal because a PhDStudent \"is a\" Student.\n\t\t\t\t\t\t\t    // We are following the arrows in the inheritance diagram.\n~~~\n\n\n##Exercise 3\n\nGiven the Person hierarchy from Exercise 2:\n\n![Person Hierarchy](./img/03.png) \n\n...suppose that we have the following legal declarations and assignments:\n\n~~~java\nPerson p1 = new Person(); \nPerson p2 = new Person (); \nPhDStudent phd1 = new PhDStudent(); \nTeacher t1 = new Teacher(); \nStudent s1 = new Student ();\n~~~\n\nBased on these legal variable declarations, which of the following assignments are legal and why or why not?\n\n~~~java\ns1 = p1;    // This is NOT legal...a Person \"may not be\" a Student. \n\t\t\t// We are going against the arrows in the inheritance diagram.\n~~~\n\n~~~java\ns1 = p2;    // Again, this is NOT legal...a Person \"may not be\" a Student. \n\t\t\t// We are going against the arrows in the inheritance diagram.\n~~~ \n\n~~~java\np1 = s1;   // This is legal...a Student \"is a\" Person. \n  \t\t   // We are following the direction of the arrows in the inheritance diagram.\n~~~\n\n~~~java\nt1 = s1;   // This is NOT legal...there is no relationship between a Teacher and a \n\t\t   // Student in our inheritance diagram. \n~~~\n\n~~~java\ns1 = phd1; // This is legal...a PhDStudent \"is a\" Student. \n  \t\t   // We are following the direction of the arrows in the inheritance diagram.\n~~~\n\n~~~java\nphd1 = s1;   // However, this is NOT legal...a Student \"may not be\" a PhDStudent. \n  \t\t     // We are going against the direction of the arrows in the \n  \t\t     // inheritance diagram.\n~~~\n\n"}]}